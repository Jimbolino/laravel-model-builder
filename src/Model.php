<?php namespace Jimbolino\Laravel\ModelBuilder;

use ReflectionClass;

/**
 * Class Model
 * @package Jimbolino\Laravel\ModelBuilder
 */
class Model {

    // input
    private $baseModel = 'Model';
    private $table = '';
    private $describes = array();
    private $foreignKeys = array();
    private $foreignKeysByTable = array();

    // the class and table names
    private $class = '';

    // auto detected the elements
    private $timestampFields = array();
    private $primaryKey = '';
    private $incrementing = false;
    private $timestamps = false;
    private $dates = array();
    private $hidden = array();
    private $fillable = array();
    private $relations = array();
    private $namespace = '';
    private $prefix = '';

    // the result
    private $fileContents = '';

    /**
     * First build the model
     * @param $table
     * @param $baseModel
     * @param $describes
     * @param $foreignKeys
     * @param string $namespace
     * @param string $prefix
     */
    public function buildModel($table, $baseModel, $describes, $foreignKeys, $namespace = '', $prefix = '') {
        $this->table = StringUtils::removePrefix($table,$prefix);
        $this->baseModel = $baseModel;
        $this->describes = $describes;
        $this->foreignKeys = $this->filterAndSeparateForeignKeys($foreignKeys['all'], $table);
        $this->foreignKeysByTable = $foreignKeys['ordered'];

        if(!empty($namespace)) {
            $this->namespace = ' namespace '.$namespace.';';
        }
        $this->prefix = $prefix;

        $this->class = StringUtils::prettifyTableName($table, $prefix);
        $this->timestampFields = $this->getTimestampFields($this->baseModel);

        $describe = $this->describes[$table];


        // main loop
        foreach($describe as $field) {
            if($this->isPrimaryKey($field)) {
                $this->primaryKey = $field->Field;
                $this->incrementing = $this->isIncrementing($field);
                continue;
            }

            if($this->isTimestampField($field)) {
                $this->timestamps = true;
                continue;
            }

            if($this->isDate($field)) {
                $this->dates[] = $field->Field;
            }

            if($this->isHidden($field)) {
                $this->hidden[] = $field->Field;
                continue;
            }

            if($this->isForeignKey($table, $field->Field)) {
                continue;
            }

            $this->fillable[] = $field->Field;
        }

        // relations
        $this->relations = new Relations($table, $this->foreignKeys, $this->describes, $this->foreignKeysByTable, $prefix);

    }

    /**
     * Secondly, create the model
     */
    public function createModel() {

        $file = '<?php'.$this->namespace.LF;

        $file .= '/**'.LF;
        $file .= ' * Eloquent class to describe the '.$this->table.' table'.LF;
        $file .= ' *'.LF;
        $file .= ' * automatically generated by ModelGenerator.php '.LF;
        //$file .= ' * on: '.date(DATE_ISO8601);
        $file .= ' */'.LF.LF;

        // start a new class that extends the baseModel
        $file .= 'class '.$this->class.' extends '.$this->baseModel.' {'.LF.LF;

        // the name of the mysql table
        $file .= TAB.'protected $table = '.StringUtils::singleQuote($this->table).';'.LF.LF;

        // primarykey defaults to "id"
        if($this->primaryKey !== 'id') {
            $file .= TAB.'public $primaryKey = '.StringUtils::singleQuote($this->primaryKey).';'.LF.LF;
        }

        // timestamps defaults to true
        if(!$this->timestamps) {
            $file .= TAB.'public $timestamps = '.var_export($this->timestamps, true).';'.LF.LF;
        }

        // incrementing defaults to true
        if(!$this->incrementing) {
            $file .= TAB.'public $incrementing = '.var_export($this->incrementing, true).';'.LF.LF;
        }

        // all date fields
        if(!empty($this->dates)) {
            $file .= TAB.'public function getDates() {'.LF;
            $file .= TAB.TAB.'return array('.StringUtils::implodeAndQuote(', ',$this->dates).');'.LF;
            $file .= TAB.'}'.LF.LF;
        }

        // most fields are considered as fillable
        $wrap = TAB.'protected $fillable = array('.StringUtils::implodeAndQuote(', ', $this->fillable ).');'.LF.LF;
        $file .= wordwrap($wrap, ModelGenerator::$lineWrap, LF.TAB.TAB);

        // except for the hidden ones
        if(!empty($this->hidden)) {
            $file .= TAB.'protected $hidden = array('.StringUtils::implodeAndQuote(', ', $this->hidden).');'.LF.LF;
        }

        // add all relations
        $file .= $this->relations;

        // close the class
        $file .= '}'.LF.LF;

        $this->fileContents = $file;
    }

    /**
     * Thirdly, return the created string
     * @return string
     */
    public function __toString() {
        return $this->fileContents;
    }


    // TODO: not sure about this one yet
    protected function getTimestampFields($model) {
        try{
            $baseModel = new ReflectionClass($model);
            $timestampFields = array(
                'created_at' => $baseModel->getConstant('CREATED_AT'),
                'updated_at' => $baseModel->getConstant('UPDATED_AT'),
                'deleted_at' => $baseModel->getConstant('DELETED_AT'),
            );
        }
        catch(Exception $e) {
            echo 'baseModel: '.$model.' not found'.LF;
            $timestampFields = array(
                'created_at' => 'created_at',
                'updated_at' => 'updated_at',
                'deleted_at' => 'deleted_at'
            );
        }
        return $timestampFields;
    }

    // Check if the field is primary key
    protected function isPrimaryKey($field) {
        if($field->Key == 'PRI') {
            return true;
        }
    }

    // Check if the field (primary key) is auto incrementing
    protected function isIncrementing($field) {
        if($field->Extra == 'auto_increment') {
            return true;
        }
        return false;
    }

    // Check if we have timestamp field
    protected function isTimestampField($field) {
        if(array_search($field->Field, $this->timestampFields)) {
            return true;
        }
    }

    // Check if we have a date field
    protected function isDate($field) {
        if(StringUtils::str_contains(array('date', 'time', 'year'), $field->Type)) {
            return true;
        }
    }

    // Check if we have a hidden field
    protected function isHidden($field) {
        if (StringUtils::str_contains(array('hidden','secret'), $field->Comment)) {
            return true;
        }
    }

    // Check if we have a foreign key
    protected function isForeignKey($table, $field) {
        foreach($this->foreignKeys['local'] as $entry) {
            if($entry->COLUMN_NAME == $field && $entry->TABLE_NAME == $table) return true;
        }
    }

    // Only show the keys where table is mentioned
    protected function filterAndSeparateForeignKeys($foreignKeys, $table) {
        $results = array('local' => array(), 'remote' => array());
        foreach($foreignKeys as $foreignKey) {
            if($foreignKey->TABLE_NAME == $table) {
                $results['local'][] = $foreignKey;
            }
            if($foreignKey->REFERENCED_TABLE_NAME == $table) {
                $results['remote'][] = $foreignKey;
            }
        }
        return $results;
    }


}
